Introduction to Haskell

Kwang Yul Seo
Haskell School
@kwangyulseo
kwangyul.seo@gmail.com

* Haskell

.image intro/freedom.png 500 _

* History

- 1930s: Alonzo Church (Lambda Calculus)
- 1950s: John McCarthy (Lisp)
- 1960s: Peter Landin (ISWIM)
- 1970s: John Backus (FP), Robin Milner (ML)
- 1980s: David Turner (Miranda)

* Major Characteristics

- Purely functional
- Statically typed
- Lazy

* Programming Style

C/C++

  int total = 0;
  for (int i = 1; i <= 10; i++)
    total = total + i;

Haskell

  sum [1..10]

* Glasgow Haskell Compiler

- Provide compiler (ghc) and interpreter (ghci)
.link www.haskell.org/platform

* GHCi

- REPL (Read-Eval-Print Loop)
- Run ghci on terminal

  $ ghci
  GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help
  Prelude>

* Expression

  > 2+3*4
  14
  > (2+3)*4
  20
  > negate 3
  -3

* Standard Prelude

- Standard library of Haskell
- Automatically loaded when GHCi is started

  > head [1,2,3,4]
  1
  > tail [1,2,3,4]
  [2,3,4]
  > [1,2,3,4] !! 2
  3
  > take 3 [1,2,3,4,5]
  [1,2,3]
  > drop 3 [1,2,3,4,5]
  [4,5]
  > length [1,2,3,4,5]
  5
  > sum [1,2,3,4,5]
  15
  > product [1,2,3,4,5]
  120
  > [1,2,3] ++ [4,5]
  [1,2,3,4,5]
  > reverse [1,2,3,4,5]
  [5,4,3,2,1]

* GHCi commands

- :load name - load a script
- :reload - reload the current script
- :type expr - show the type of expr
- :? - show all commands
- :quit - quit ghci

* Function Application

- function `f` with argument `a`

  f a

- function `f` with argument `a` and `b`

  f a b

- function `f` with argument `a`, `b` and `c`

  f a b c

- function `f` and `g` with argument `a` and `b` respectively

  f a + g b

* Haskell Script

- Can define a function
- Has .hs extension

test.hs

  main = putStrLn "Hello World!"

Execute test.hs

  $ ghc test.hs -o test
  $./test
  "Hello World"

* Haskell Function Definition

test.hs

  double x = x + x
  square x = x * x
  fac n = product [1..n]
  average ns = sum ns `div` length n

Execute test.hs

  $ ghci test.hs
  Prelude> double 10
  20
  Prelude> square 10
  100

* Naming Requirements

- Function and argument names start with lowercase letter

  myFun
  fun1
  arg_2
  x'

- Type names start with upppercase letter

  Bool
  Char
  String

* Naming Convention

List argument names have `s` suffix

  xs
  ns
  nss

* Layout Rules

  a = b + c
    where
      b = 1
      c = 2
  d = a *

* Type

- A set of related values
- `Bool` type has `True` and `False` as its values
- e :: t if expression `e` evaluates to a value with type `t`
- All well formed expressions have a type, which is inferred automatically by the compiler

* Type Error

  > 1 + False
  <interactive>:16:3:
      No instance for (Num Bool) arising from a use of '+'
      In the expression: 1 + False
      In an equation for 'it': it = 1 + False

* Inspect Types

  > not False
  True
  > :type not False
  not False :: Bool

* Basic Types of Haskell

- Bool
- Char
- String
- Int - integer between [-2^29 .. 2^29-1]
- Integer - arbitrary precision integer
- Float - floating point number

* List Type

- An enumeration of values with the same type

  [False, True, False] :: [Bool]
  ['a', 'b', 'c', 'd'] :: [Char]
  [['a'], ['b', 'c']] :: [[Char]]

- `[t]` has `t` as its element type

* List

.image intro/list.png 400 _

.link learnyouahaskell.com/starting-out

* Tuple Type

- An enumeration of values with different types

  (False, True) :: (Bool, Bool)
  (False, 'a', True) :: (Bool, Char, Bool)
  ('a', (False, ('b')) :: (Char, (Bool, Char))
  (True, ['a', 'b']) :: (Bool, [Char])

- (t1, t2, ..., tn) is a n-tuple where its j-th element is of tj type

* Function Type

- Function maps a value of one type to a value of another type

  not :: Bool -> Bool
  even :: Int -> Bool

  add :: (Int, Int) -> Int
  add (x,y) = x + y

  zeroto :: Int -> [Int]
  zeroto n = [0..n]

- t1 -> t2 is a function type which maps a value of `t1` type to a value of `t2` type

* Curried Function

- Uncurried form
  add :: (Int, Int) -> Int
  add (x, y) = x + y

- Curried form
  add' :: Int -> (Int -> Int)
  add' x y = x + y

* Partial Function

Partially apply arguments and get a new function which accepts the remaining arguments

  add' 1 :: Int -> Int
  take 5 :: [Int] -> [Int]
  drop 5 :: [Int] -> [Int]

* Convention of Currying

- -> is right associative to avoid too many parentheses

  Int -> Int -> Int -> Int

is equal to

  Int -> (Int -> (Int -> Int))

* Application of Curried Function

- Function application is left associative
- mult x y z means (((mult x) y) z)
- Every Haskell function is curried by default

* Type Variable

- Type variabel names start with lowercase letter. e.g., a, b, c
- A type variable can be any type

  > :t head
  head :: [a] -> a
  > :t fst
  fst :: (a, b) -> a

* Polymorphic Function

- A function whose type contains a more than one type variable

  length :: [a] -> Int

`length` returns an `Int` for every type `a`.

  > length [False,True]
  2
  > length [1,2,3,4]
  4
  > length ['a','b','c']
  3
  > length ["hello","world"]
  2

* Polymorphic Functions in Prelude

  fst :: (a, b) -> a
  head :: [a] -> a
  take :: Int -> [a] -> [a]
  zip :: [a] -> [b] -> [(a, b)]
  id :: a -> a

* Overloaded Functions

- A polymorphic function which contains more than one class constraint

  (+) :: Num a => a -> a -> a

e.g.,

  > 1 + 2
  3
  > 1.0 + 2.0
  3.0
  > 'a' + 'b'
  ERROR

* Overloaded Function (==)

  > 5 == 5
  True
  > 5 /= 5
  False
  > 'a' == 'a'
  True
  > "Ho Ho" == "Ho Ho"
  True
  > 3.432 == 3.432
  True

* Overloaded Function (read)

  > read "5" :: Int
  5
  > read "5" :: Float
  5.0
  > (read "[1,2,3,4]" :: [Int])
  [1,2,3,4]
  > (read "(3, 'a')" :: (Int, Char))
  (3, 'a')

* Haskell Type Classes

- Num: number types

  (+) :: Num a -> a -> a -> a

- Eq: types with equality operators

  (==) :: Eq a => a -> a -> Bool

- Ord: types with ordering operators

  (<) :: Ord a => a -> a -> Bool

- Show: types that can be converted to String

  show :: Show a => a -> String

- Read: types that can be created from String

  read :: Read a => String -> a

* Overloaded Number Literal

A numeric constant in Haskell can have multiple types

  > : t 123
  123 :: Num a => a
  > :t (123 :: Int)
  (123 :: Int) :: Int
  > :t (123 :: Double)
  (123 :: Double) :: Double
  > :t (123 :: Int)
  (123 :: Int) :: Int

* Conditional Expression

- else expression can't be omitted because Haskell always returns a value

  abs :: Int -> Int
  abs n = if n >= 0 then n else -n

  signum :: Int -> Int
  signum n = if n <0 then -1 else
          if n == 0 then 0 else 1

* Let and Where

Let

  let y = a*b
      f x = (x+y)/y
  in f c + f d

Where

  f x y | y>z = ...
        | y==z = ...
        | y<z = ...
    where z = x*x

* Guard

  abs n | n >= 0 = n
        | otherwise = -n

  signum n | n < 0 = -1
          | n == 0 = 0
          | otherwise = 1

* Pattern Matching

  not :: Bool -> Bool
  not False = True
  not True = False

  (&&) :: Bool -> Bool -> Bool
  True && True = True
  _ && _ = False

* Problematic Patterh Matching

  (&&) :: Bool -> Bool -> Bool
  _ && _ = False
  True && True = True

* List Pattern

- A list [1,2,3,4] is a syntatic sugar for 1:(2:(3:(4:[])))
- `(:)` is a cons operator

* Lambda Expression

- Lambda expression lets us create an anonymous function

  \x -> x + x

e.g.,

  add x y = x + y
  add = \x -> (\y -> x + y)

  const :: a -> b -> a
  const x _ = x

  const :: a -> (b -> a)
  const x = \_ -> x

Typically used with `map` function

  odds n = map f [0..n-1]
    where
      f x = x * 2 + 1

  odd n = map (\x -> x * 2 + 1) [0..n-1]

* Section

- 1 + 2 can be written as (+) 1 2
- Can create a new function by providing only one of the two arguments

  (1+)
  (1/)
  (*2)
  (/2)

* Recursive Function

- Haskell can define a function with a reference to itself

  fac 0 = 1
  fac n = n * fac (n-1)

* Execution of fac Function

  fac 3
  = 3 * fac 2
  = 3 * (2 * fac 1)
  = 3 * (2 * (1 * fac 0))
  = 3 * (2 * (1 * 1))
  = 3* (2 * 1)
  = 3 * 2
  = 6

* Merits of Recursive Functions

- Some functions are naturally defined using recursion
- Can prove properties using mathematical induction

* Recurson on Lists

  product :: Num a => [a] -> a
  product [] = 1
  product (n:ns) = n * product ns

  length :: [a] -> int
  length [] = 0
  length (_:xs) = 1 + length xs

  reverse :: [a] -> [a]
  reverse [] = []
  reverse (x:xs) = reverse xs ++ [x]

* Execution of Recursive Functions

- length

  length [1,2,3]
  = 1 + length [2,3]
  = 1 + (1 + length [3])
  = 1 + (1 + (1 + length []))
  = 1 + (1 + (1 + 0))
  = 3

- reverse

  reverse [1,2,3]
  = reverse [2,3] ++ [1]
  = (reverse [3] ++ [2]) ++ [1]
  = ((reverse [] ++ [3]) ++ [2]) ++ [1]
  = (([] ++ [3]) ++ [2]) ++ [1]
  = [3,2,1]

* Recursive Functon with Multiple Arguments

  zip :: [a] -> [b] -> [(a,b)]
  zip [] _ = []
  zip _ [] = []
  zip (x:xs) (y:ys) = (x, y) : zip xs ys

* More Recursion on Lists

- drop
  drop :: Int -> [a] -> [a]
  drop 0 xs = xs
  drop _ [] = []
  drop n (_:xs) = drop (n-1) xs

- (++)

  (++) :: [a] -> [a] -> [a]
  [] ++ ys = ys
  (x:xs) ++ ys = x:(xs ++ ys)

* Quick Sort

  qsort :: Ord a => [a] -> [a]
  qsort (x:xs) =
    qsort smaller ++ [x] ++ qsort larger
    where
      smaller = [a | a <- xs, a <= x]
      larger = [b | b <- xs, b > x]

.image intro/quicksort.png 300 _

* Higher Order Function

A function which returns a function or receives a function as its argument

  twice :: (a -> a) -> a -> a
  twice f x = f (f x)

* map Function

Definition

  map :: (a -> b) -> [a] -> [b]
  map f xs = [f x | x <- xs]

Usage

  > map (+1) [1,3,5,7]
  [2,4,6,8]

* filter Function

Definition

  filter :: (a -> Bool) -> [a] -> [b]
  filter p xs = [x | x <- xs, p x]

Usage

  > filter even [1..10]
  [2,4,6,8,10]

* takeWhile Function

Definition

  takeWhile :: (a -> Bool) -> [a] -> [a]
  takeWhile p [] = []
  takeWhile p (x:xs)
    | p x = x : takeWhile p xs
    | otherwise = []

Usage

  > takeWhile (/= ' ') "abc def"
  "abc

* foldr Function

foldr represents a pattern for recursion

  f [] = v
  f (x:xs) = x ⊕ f xs

* Comparison with Direct Recursion

- Direct

  -- v = 0, ⊕ = +
  sum [] = 0
  sum (x:xs) = x + sum xs

  -- v = 0, ⊕ = *
  product [] = 1
  product (x:xs) = x * product xs

  -- v = 0, ⊕ = &&
  and [] = True
  and (x:xs) = x && and xs

- foldr

  sum = foldr (+) 0
  product = foldr (*) 1
  and = foldr (&&) True

* Definition of foldr

  foldr :: (a -> b -> b) -> b -> [a] ->b
  foldr f v [] = v
  foldr f v (x:xs) = f x (foldr f v xs)

.image intro/foldr.png 300 _

* Execution of foldr

- sum

  sum [1,2,3]
  = foldr (+) 0 [1,2,3]
  = foldr (+) 0 (1:(2:(3:[])))
  = 1+(2+(3+0))
  = 6

- product

  product [1,2,3]
  = foldr (*) 1 [1,2,3]
  = foldr (*) 1 (1:(2:(3:[])))
  = 1*(2*(3*1))
  = 6

* Recursive Functions using foldr

  length = foldr (\_ n -> 1 + n) 0
  reverse = foldr (\x xs -> xs ++ [x]) []
  (++ ys) = foldr (:) ys

* Merits of foldr

- Easier to define a function
- Easier to optimize
- Can prove properties of a function using algebraic properties of foldr

* References

1. Slides of Programming in Haskell
.link http://www.cs.nott.ac.uk/~pszgmh/book.html

2. Learn You a Haskell for Great Good!
.link http://learnyouahaskell.com/chapters

3. A Gentle Introduction to Haskell 98
.link https://www.haskell.org/tutorial/haskell-98-tutorial.pdf
