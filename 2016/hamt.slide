unordered-containers, Efficient hashing-based container types

Kwang Yul Seo
Haskell Shcool
@kwangyulseo
kwangyul.seo@gmail.com

* A fast, efficient association map

Hash table!

BUT, the hash table is founded upon the destructive update makes it hard to use with pure code

* Persistent maps in Haskell

- One that implements a non-destructive update
- Data.Map is the most commonly used map type
- Implemented using size balanced trees
- Keys can be any type that can be ordered

  insert :: Ord k => k -> a -> Map k a -> Map k a
  insert :: Ord a => a -> Set a -> Set a

* Performance of Data.Map

- O(log n) comparisons
- Many common types are expensive to compare. e.g., `String`, `ByteString` and `Text`
- Given a string of length `k`, O(k * log n) comparisons to look up an entry

* hashable

- Define a class `Hashable`, for types that can be converted to a hash value
- unordered-containers builds on top of this

  ghci> import Data.Hashable
  ghci> hash "foo"
  60853164

* unordered-containers

-  The keys in a map, or the elements of a set must be an instance of `Hashtable` and `Eq`

  insert :: (Eq k, Hashable k) => k -> v -> HashMap k v -> HashMap k v
  insert :: (Eq a, Hashable a) => a -> HashSet a -> HashSet a

- Many operations have a average-case complexity of O(log n).
- The implementation uses a large base (i.e. 16) so in practice these operations are constant time.

* How to Use HashMap

  data Child = Child { childName :: String
                    , childLocation :: String
                    } deriving (Eq, Generic, Show)

  data Priority = Please | PrettyPlease | PleasePleasePlease
    deriving (Eq, Generic)

  data Request = Request { requestPresent :: String
                        , requestPriority :: Priority
                        } deriving (Eq, Generic, Show)

  instance Hashable Child
  instance Hashable Priority
  instance Hashable Request

* How to Use HashMap

  olliesWishList :: HashMap Child [Request]
  olliesWishList =
    let ollie = Child { childName = "ocharles"
                      , childLocation = "London"
                      } fromList
    in [(ollie, [ Request "Artisan Coffee" Please
                , Request "Dependent Types in Haskell" PleasePleasePlease
                , Request "Lambda Fridge Magnets" PrettyPlease
                ])]

  main = do
    void $ traverseWithKey showWishList olliesWishList
  where
    showWishList child wants = do
      putStrLn (childName child ++ " wants...")
      mapM_ (putStrLn . requestPresent) wants

Which produces the output:

  ocharles wants...
  Artisan Coffee
  Dependent Types in Haskell
  Lambda Fridge Magnets

* Merits of unordered-containers

hash-maps consistently out-perform regular Ord-based maps

.image hamt/performance.png 400 _

32-bit GHC 7.4.1 on a 2.3 GHz Intel Core i7 MacBook Pro, using the default RTS settings (i.e. no +RTS flags)

* Implementation of unordered-containers

Based on hash array mapped tries (HAMT)

- a trie implemented as a n-ary tree, where n is typically 16 or 32
- reduce space overhead by not representing empty sub trees at all.

.link http://lampwww.epfl.ch/papers/idealhashtrees.pdf Phil Bagwell's paper

The higher branching factor lets us trade a small insert/delete performance regression against a large lookup performance improvement

* Tries

- aka. prefix Trees

.image hamt/binary_tree.svg
.image hamt/trie.svg

* Native Representation of Trie

- Use the prefix as an array index

.image hamt/array_rep.svg

Problem

- Memory footprint is quite big
- A lot slots wasted by NULL values

* Compressions

- Compress the array by using a bitmap to store which slots are not-NULL

.image hamt/compress_first_leaf.svg

would be 1001

.image hamt/compress_node.svg

* Compressions

- No bytes are now wasted
- Retrieving data still has complexity proportional to the prefix length

.image hamt/compress_trie.svg

* Other Libraries using HAMT

- Immutable.js: Immutable persistent data collections for Javascript which increase efficiency and simplicity
.link http://facebook.github.io/immutable-js/

- hamster: Efficient, Immutable, Thread-Safe Collection classes for Ruby
.link https://github.com/hamstergem/hamster

* References

1. 24 Days of Hackage: unordered-containers
.link https://ocharles.org.uk/blog/posts/2013-12-17-24-days-of-hackage-unordered-containers.html

2. Announcing unordered-containers 0.2
.link http://blog.johantibell.com/2012/03/announcing-unordered-containers-02.html

3.Introduction to HAMT
.link https://idea.popcount.org/2012-07-25-introduction-to-hamt/

4. Fast And Space Efficient Trie Searches
.link https://idea.popcount.org/2012-07-25-introduction-to-hamt/triesearches.pdf

5. Ideal Hash Trees
.link https://idea.popcount.org/2012-07-25-introduction-to-hamt/idealhashtrees.pdf