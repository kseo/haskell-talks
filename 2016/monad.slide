What is Monad?

Kwang Yul Seo
Haskell Shcool
@kwangyulseo
kwangyul.seo@gmail.com

* Monad

(Joke) A monad is just a monoid in the category of endofunctors, what's the problem?

.image monad/monad.jpg 500 _

* Monad Definition

.image monad/definition.png 250 _

* Why do we need Monad?

.image monad/usage.png 400 _

* Monad Definition in Haskell

  class Monad m where
      (>>=)       :: m a -> (a -> m b) -> m b
      return      :: a -> m a

Monad laws

1. return x >>= f = f x
2. m >>= return = m
3. m >>= (\y -> g y >>= f) = (m >>= g) >>= f

* Category

  -- | A class for categories.
  --   id and (.) must form a monoid.
  class Category cat where
    -- | the identity morphism
    id :: cat a a

    -- | morphism composition
    (.) :: cat b c -> cat a b -> cat a c

  instance Category (->) where
    id = GHC.Base.id
    (.) = (GHC.Base..)

* Kleisli Category

Kleisli category

  return :: (Monad m) => (a -> m a)
  (<=<)  :: (Monad m) => (b -> m c) -> (a -> m b) -> (a -> m c)

Kleisli vs Function Category

  id     ::              (a ->   a)
  return :: (Monad m) => (a -> m a)

  (.)    ::              (b ->   c) -> (a ->   b) -> (a ->   c)
  (<=<)  :: (Monad m) => (b -> m c) -> (a -> m b) -> (a -> m c)

  (f  .  g) x = f     (g x)
  (f <=< g) x = f =<< (g x)

Also

  (&)   ::   a -> (a ->   b) ->   b 
  (>>=) :: m a -> (a -> m b) -> m b 
  
* Monad and Kleisli Category

Kleisli = Monad

  m >>= f = (const m >=> f) ()

Monad Laws = Category Laws

1. f >=> return = f
2. return >=> f = f
3. f >=> (g >=> h) = (f >=> g) >=> h

* Join vs (>>=)

  (>>=) :: m a -> (a -> m b) -> m b 
  m (>>=) f = join (fmap f m)

  join :: Monad m => m (m x) -> m x
  join x =  x >>= id

* What's the categorical meaning of (>>=)?

  (>>=) :: m a -> (a -> m b) -> m b 

Better signature

  (>>=) :: (a -> m b) -> ma -> m b 

'M' as a functor from Kleisli(M) category to the Hask category 
sending each morphism "α→Mβ" from "α" to "β" in Kleisli category, to a morphism "Mα→Mβ" in the Hask category

* Monoid

The name Monad comes from Monoid

Haskell definition

  class Monoid a where
    mempty  :: a
    -- ^ Identity of 'mappend'
    mappend :: a -> a -> a

is isomorphic to 

  class Monoid m where
    mempty :: () -> m
    mappend :: (m,m) -> m

* From Monoids to Monads


* References

1. The category design pattern
.link http://www.haskellforall.com/2012/08/the-category-design-pattern.html

2. From Monoids to Monads
.link http://blog.sigfpe.com/2008/11/from-monoids-to-monads.html
